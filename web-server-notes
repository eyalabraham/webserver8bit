******************************************************
******************************************************
*
*  Note for embedded Web Server
*
******************************************************
******************************************************

Looking at two options for the hardware setup:
    1. use JK-micro NEC v25 CPU board
    2. reuse revived PC-XT, 8086 CPU board (https://sites.google.com/site/eyalabraham/pc-xt)

Peripheral options:
    Both options will require an Ethernet interface -> will use Ethernet ENC28J60
    PC-XT should replace IDE drive with an interface to an SD memory card -> BIOS changes    
    Both options can be equipped with an LCD display -> ST7735 Color TFT Display

Background information on SD serial interface:
    http://www.dejazzer.com/ee379/lecture_notes/lec12_sd_card.pdf
    http://users.ece.utexas.edu/~valvano/EE345M/view12_SPI_SDC.pdf
    Recommended site: http://elm-chan.org/docs/mmc/mmc_e.html
    Also check out Adafruit site on their SD card shield.

======================================================
 NEC v25 CPU board
======================================================

1. Use serial interface num 1 for console:
    - change FlashLite BIOS behavior by hooking a replacement console BIOS INT 10?
    - will FlashLite XDOS support TSR functionality?
    - option to change consoles only for the running app?
    - identify cable with non-crossed Tx/Rx?

    Serial 0, J4       Serial 1, J6
    ---------------    ----------------
         1 2 DSR0           1 2
     Tx0 3 4 CTS0       Rx1 3 4 DSR1
     Rx0 5 6 DSR0       Tx1 5 6
         7 8           DSR1 7 8 CTS1
     GND 9 10           GND 9 20

    my cable mapping between 10pin, dual row header to DB9 female
                            -----------------------    -------------
                                1  n.c             -->  1  CD
                                2  n.c             -->  6  DSR
                                3  Rx              -->  2  Tx
                                4  DSR             -->  7  CTS
                                5  Tx              -->  3  Rx
                                6  n.c             -->  8  RTS
                                7  DSR             -->  4  DTR
                                8  CTS             -->  9  RI
                                9  GND             -->  5  GND
                               10  n.c             -->  not connected
    
    use both serial ports on PC and FlashLite to check proper communication using a small loop back program for Ser Port 1
        using the following setup directories for BC compiler.
        where WINE and DOSBOX define 'l:' as '~/Documents':
         l:\webserve\src
         l:\webserve\src\include
         l:\webserve\bin
         ser1loop.c

    {abandoned this option} writing a TSR for v25 Flash Lite by testing TSR functionality with tsrtest.c
    use a simple TSR to hook into timer tickes and poll a byte that can be changes from a local Basic POKE command
    - Flash Lite BIOS/DOS timer uses v25 timer-1 which is et up as follows:
        timer-1 control, tmc1: 0xc0   --> interval timer, with Fclk/128 = 78,125Hz
        timer-1 modulus, md1:  4291   --> after counting, interrupt every 18.2Hz (ok!)
        timer-1 interrupt, tmic0: 0x16, tmic1: 0x17, tmic2: 0xc7
                TMF1 interrupt is generated and handled by register bank switching, vector 29
        timer-1 macro, tmms0: 0xe6, tmms1: 0x47, tmms2: 0x45

    use multi tasking executive used for my robot project - SMTE - as a basis for a solution that includes:
    - t_term -- console task, through serial-1 and a basic CLI list
    - t_time -- time task that keeps time of day and general system time tick for debug and potentially interface with NTP...
    - t_ws   -- web server task, maybe this can be used with more than one task copy to enable more than one concurrent connection? maybe add a feature to SMTE that allows dynamic addition and deletion of tasks?
    - t_sd   -- (optional) SD card interface task for IO to SD card
    - t_lcd  -- LCD display task, maybe part of the console task?
    - t_ip / t_slip -- an IP stack task. this will eventually interface to Ethernet chip, but can use Serial-0 with SLIP (before adding SD card and LCD...)
    - t_spi  -- an SPI driver task, all tasks that need SPI service will communicate with this task: t_lcd, t_eth

2. After above, use an ATmega328p AVR as parallel/serial SPI interface
    - use this for Ethernet, LCD and/or SD Card (built into LCD)
    - need logic level interfacing 3.3v/5v
    - v25 P.0, with either DMA or simple handshaking on the parallel side of the AVR, both through v25 P.2
    - need a few of IO lines for Slave Select on v25 P.1
    - describing two options: (1) with v25 ports 75245 and AVR, or (2) v25 with 8255 and AVR
    - what are the usable clock rates?
    
    option 1 connectivity schema for v25 ports 75245 and AVR:

  AVR                                             FlashLite NEC V25
=========                                      ======================

                                            J5
                                        ------------------------------------------------
                                          Port 1: PMC1=0x00, PM1=0x00
                                          Port 2: PMC2=0x00, PM2=0x00 (out) / 0xff (in)

 PB6    <----------*-------------------< ^RD/WR P1.4
                   |
 PB7    >----------------*-------------> ^RDY   P1.1 (INTP0)
                   |     |
               +--------( )---+
               |  DIR   OE^   |
               |              |
               |   74LS245    |
               |              |
 PD0..7 <----->| [B]      [A] |<------->        Data in/out  P2.0..P2.7
               |              |
               |              |
               +--------------+

 PB0    <------------------------------< STB    P1.5

 PC0    <------------------------------< FSEL0  P1.6
 PC1    <------------------------------< FSEL1  P1.7
        
        
 name:  FSEL1       FSEL0       LCD-CS^     LCD-D/C^    ETH-CS^
 v25 :   P1.7        P1.6
 AVR :   PC1         PC0         PC4         PC3         PC5
     ----------   ---------   ----------  ----------  ----------
          0           0           1           1           0         - Ethernet select
          0           1           0           0           1         - LCD select command
          1           0           0           1           1         - LCD select data
          1           1           1           1           1         - nothing selected

        write to device timing                  read from device timing
    ---------------------------------       ---------------------------------

    SSn^    `````\......../```````          SSn^    `````\......../```````
    
    RD/WR^  `````\......../```````          RD/WR^  ``````````````````````
    
    Data    -----<XXXXXXXX>-------          Data    --------<XXXXXXXX>----
    
    STB     ```````\...../````````          STB     `````\......./````````
    
    RDY^    `````````\.../````````          RDY^    `````````\.../````````


    option 2 connectivity schema for v25 with 8255 and AVR:

    v25 CPU bus                     8255                    AVR
===================       ==========================    ===========

                +-------------------+   IO addresses
                |                   |  --------------
                |       8255*       |   PA   0xXXX0
                |                   |   PB   0xXXX1
INTP0** <-------| PC3               |   PC   0xXXX2
(P1.1)          |                   |   Ctrl 0xXXX3
                |                   |
IORD^   ------->| RD^      PA0..PA7 |<------------>    PD0..PD7  Data
                |                   |
                |               PC4 |<-------------    PB0       STB^ (AVR strobe data into 8255)
IOWR^   ------->| WR^           PC5 |------------->    PB1       IBF  (8255 latched data, not ready = '1', ready or data read by CPU = '0')
                |               PC6 |<-------------    PB6       ACK^ (AVR open 3-state read and ack data was read after OBF^)
A0      ------->| A0            PC7 |------------->    PB7       OBF^ (indicate to AVR data is available for reading)
A1      ------->| A1                |
A2      ------->| CS^               |
                |          PC0..PC2 |------------->    PC0..PC2  FSEL0..FSEL2
D0..D7  <------>| D0..D7   PB0..PB7 |------------->    ???       n/a
                |                   |
                +-------------------+

*  8255 Port A in 'Mode 2'
** INTP0 should be set to trigger on a low to high (rising edge) transition.


 name:  FSEL2       FSEL1       FSEL0       ETH-CS^    LCD-CS^     LCD-D/C^     SD-CS^
 8255:   PC2         PC1         PC0
 AVR :   PC2         PC1         PC0         PC5         PC4         PC3        PB2/SS^ **
      ---------   ---------   ---------   ----------  ----------  ----------  ------------
          0           0           0           1           0           0            1        - LCD select command
          0           0           1           1           0           1            1        - LCD select data
          0           1           0           0           1           1            1        - Ethernet select - read
          0           1           1           0           1           1            1        - Ethernet select - write
          1           0           0           1           1           1            0        - SD Card select - read
          1           0           1           1           1           1            0        - SD Card select - write
          1           1           0           1           1           1            1        - Read AVR status
          1           1           1           1           1           1            1        - Write AVR command

** SD card select with SPI SS^ line is not implemented

======================================================
 PC-XT, 8086 CPU board option
======================================================

1. Reuse PC-XT 8255 interface for SD card and Ethernet instead of IDE interface.
2. Split 8255 to Mode 0 port B and Mode 2 port A, with port C serving as hand shake lines
3. Rewrite BIOS to handle Disk IO INT through new setup above to SD card
   SD card can be populated/written on a PC -> saves dev time!
4. Update Minix distro with Ethernet driver and enable network processes

Interfacing SD card with parallel IO interface
------------------------------------------------------

SD card connects with SPI to AVR 328P that connects through 8255 Mode 1, also can be done with Mode 2.
However, Mode 2 can only be used on one 8255 bank. So use Mode 0 for AVR (to SD card) and Mode 2 for Ethernet (see below)

Use two AVRs, one for SD interface and one for Ethernet:
- SD interface AVR 328P (connect to Mode-0 8255 port B bank) – PB is IO, PC0..2 two hand shake lines + RD/WR
- 8255 Mode 0 port B bank will switch between ‘output’ and ‘input’ modes
- AVR Port D PD0..7 for data transfer
- SPI interface for SD card SCLK/MISO/MOSI
- Dual function with programming – need to remove SD card while programming AVR
- AVR PB6 for SD card CS
- AVR PB0  and PB1, for parallel hand shake lines OBF/Ack (OBF can trigger AVR interrupt) or STB/IBF (interrupt trigger?) --> will need to manually bit-bang these functions from the 8255 so that we have enough IO lines left to also implement a ‘read’/’write’ direction. Otherwise we automatically get an interrupt line that I don’t need for the CPU
- Will need to include a 74245 bi directional buffer between AVR and 8255
- PB2 set ‘read’ or ‘write’ SD modes (use extra PCx lines on 8255)
- Can use interrupt only on the AVR side when CPU writes to the SD card?
- Use polled IO for CPU to AVR/SD

Ethernet interface
------------------------------------------------------

Ethernet chip to AVR 328P that connects to a Mode 2 8255 port bank
PA is IO, PC3..7 hand shake


======================================================
 Notes on memory models
======================================================

The memory models are (https://en.wikipedia.org/wiki/Intel_Memory_Model):

Model 	Data 	Code 	Definition
--------------------------------------------------------------------------------------
Tiny* 	near 	near    CS=DS=SS, (COM) executable file format
Small 	near** 	near 	DS=SS
Medium 	near** 	far 	DS=SS, multiple code segments
Compact far 	near 	single code segment, multiple data segments
Large 	far 	far 	multiple code and data segments
Huge 	huge 	far 	multiple code and data segments; single array may be >64 KB

*   In the Tiny model, all four segment registers point to the same segment.
**  In all models with near data pointers, SS equals DS.
    Stack is always limited to at most 64 KByte.

**************
*** issues ***
**************
for FlashLite V25, code compiled with memory models Compact, Large or Huge do not run and cause memory issues for the board's XDOS..
need to find out why models that use 'far' data pointers, i.e. DS .neq. SS fail
- tried same code, ser1loop.c, compiled exe per memory model on BC5 IDE
- 'ser1loop' compiles use make it binary identical to the one compiled with the IDE
- suspect timer clock tick interrupt that uses register bank switching:
    disabled timer ticks with basic code and in 'c' code with no change
- never figured out what happened here, no response from JK Micro either.
  changing over to the Watcom toolchain solved the problem!

======================================================
 Notes on Borland C 5.x and WATCOM toolchain/compiler
======================================================

Ultimately abandoned this method and moved to using Watcom C toolchain instead of Borland
- Watcom is more flexible with its options (http://openwatcom.org/)
- better suited for running in a Linux hosted cross compile environement
- produced reliable code that ran in all memory models

Keeping the notes on Borland here just in case I need them sometime...

Opted to use the command line 'tasm.exe', 'tlib.exe', 'bcc.exe' and linker 'tlink.exe'
to run the command line versions and use Eclipse as IDE + a traditional Make file will require DOSbox as follows:
 dosbox -c bcc.exe <options> -c exit
created 'traditional' make file and 'build.sh' script as a helper script to manage dosbox and 16-bit DOS tool
built a new environment around Eclipse after having many issues
with the build environment based on Borland C IDE

The requirements for this to work are
- installed Borland IDE and TASM with access to the command line tools bcc.exe tlink.exe tasm.exe tlib.exe
- Eclipse IDE
- DosBox for Linux
- a set of scripts in this directory
- Make utility
- created a 'build.sh' shell script to interface with DosBox and the 16-bit Borland utilities

in DosBox .config define the following mount points

    [autoexec]
    # Lines in this section will be run at startup.
    # You can put your MOUNT lines here.
    mount c ~/drive_c
    mount l ~/Documents

